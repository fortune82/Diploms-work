{"version":3,"sources":["autorizaton.js","main.js","modalDescription.js","personal.js","search.js"],"names":["password","document","querySelector","email","enterButton","pasw","exitAutorization","querySelectorAll","forEach","e","addEventListener","autorization","style","display","modalClockDescription","innerHTML","color","value","fetchLogin","async","response","fetch","result","json","passwordValue","emailValue","elem","setTimeout","location","href","console","log","fontWeight","search","searchHidden","seasonClock","seasonClockBlock","clockSlider","seasonClockDescription","buttonNewClock","newItemsClock","headerContactsAutorization","inputPassword","mailingButton","mailingModal","descriptionMailingButton","backMailingModal","formRegistraition","btnChoose","chooseInp","sortChooseButtonMin","sortChooseButtonMax","slide","showing","clockImage","modalClockDescriptionDescription","modalClockDescriptionCharacteristic","modalClockDescriptionImg","modalClockDescriptionPrice","passw","priceClock","getElementById","valueRangeOut","brendsBtn","brends","resetChoose","miniMenu","menu","backMenu","menuLink","filterChooseClock","backFilter","menuFilterChooseClock","classList","toggle","remove","searchInput","setAttribute","newDoc","createElement","insertAdjacentElement","model","fetchData","modelValue","keyCode","response3","description","charakteristik","price","image","fetchClock","onclick","setInterval","el","window","onload","response2","clock2","downloadAllClock","insertAfter","refElem","parentNode","insertBefore","nextSibling","getAttribute","backgroundColor","checked","manClock","id","filter","brendClockChoose","brend","priceInp","clockChoosePrice","sortType","i","children","length","j","replaceChild","sortList","sortListDesc","fetchData2","personalDataButton","formPersonal","personalSaveDataButton","removeAttribute","border","add","newelem","map","contains","disabled"],"mappings":"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","file":"../js/main.min.js","sourcesContent":["let password = document.querySelector(\"#password\"); // поле ввода пароля\nlet email = document.querySelector(\"#email\"); // поле ввода почты\nlet enterButton = document.querySelector(\".enterButton\"); // кнопка отправки формы\nlet pasw = document.querySelector(\".pasw\");\nlet exitAutorization = document.querySelectorAll(\".exit\"); // кнопка выхода из модального окна авторизации\n\n\n// -------------------Кнопка закрытия модальных окон----------------------\nexitAutorization.forEach((e) => {\n    e.addEventListener('click', () => {\n        autorization.style.display = 'none';\n        modalClockDescription.style.display = 'none';\n        pasw.innerHTML = 'Пароль' // Возвращаем надпись в исходное состояние. Если этого не сделать, тогда после ввода неправильного пароля будет висеть надпись \"Пароль не правильный. Попробуйте ещё\".\n        pasw.style.color = 'grey';\n        password.value = \"\"\n        email.value = \"\"\n    })\n});\n\n\nconst fetchLogin = async () => {\n    const url = `http://localhost:3007/password&login`;\n    const response = await fetch(url);\n    const result = await response.json();\n\n    enterButton.addEventListener(\"click\", function login() {\n\n        // -------------------Получаем вводимый пароль-----------------\n        let passwordValue = password.value;\n        password.addEventListener(\"input\", () => {\n            passwordValue = password.value;\n        })\n        // -------------------Получаем вводимый email-----------------\n        let emailValue = email.value;\n        email.addEventListener(\"input\", () => {\n            emailValue = email.value;\n\n        })\n\n        // // --------------валидация почты-------------------\n        // function validateEmail(emailValue) {\n        //     var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        //     return re.test(String(email).toLowerCase());\n        // }\n\n\n        result.forEach((elem) => {\n            if (passwordValue === elem.password && emailValue === elem.email) {\n                // alert('угадал')\n                // document.location.href = \"err404.html\"; //Это работает в Mozila, но не работает в Chrome\n                // А это работает везде\n                setTimeout(function () {\n                    document.location.href = \"personal.html\";\n                }, 20);\n                autorization.style.display = 'none';\n                console.log(location);\n                pasw.innerHTML = 'Пароль' // Возвращаем надпись в исходное состояние. Если этого не сделать, тогда после ввода неправильного пароля будет висеть надпись \"Пароль не правильный. Попробуйте ещё\".\n                pasw.style.color = 'grey';\n                pasw.style.fontWeight = 'normal';\n                password.value = \"\"\n                email.value = \"\"\n\n            } else if (passwordValue !== elem.password || emailValue !== elem.email) {\n                pasw.innerHTML = 'Пароль или email не правильный. Попробуйте ещё';\n                pasw.style.color = 'red'\n                pasw.style.fontWeight = 'bold'\n                // password.value = \"\"\n                // login()\n            }\n        })\n    })\n}\nfetchLogin()","let search = document.querySelector(\".lastLi\");\nlet searchHidden = document.querySelector('.searchHidden');\nlet seasonClock = document.querySelectorAll('.season__clock-description p'); // получаем все карточки с товаром\nlet seasonClockBlock = document.querySelectorAll('.season__clock-model'); // получаем блок с товаром \"Сезон 2020/21\"\nlet clockSlider = document.querySelector('.season__clock-description2');\nlet seasonClockDescription = document.querySelector('.season__clock-description');\nlet buttonNewClock = document.querySelector('.newItems button'); // Кнопка для подгрузки карточек с часами\nlet newItemsClock = document.querySelector('.newItems__clock');\nlet headerContactsAutorization = document.querySelector('.header__contacts-autorization'); //кнопка войти/регистрация\nlet autorization = document.querySelector(\".modal\"); // модальное окно авторизации\n// let exitAutorization = document.querySelectorAll(\".exit\"); // кнопка выхода из модального окна авторизации\nlet inputPassword = document.querySelectorAll('#autorization input'); // для перебора всех input модального окна (при закрытии модального окна будем очищать все input)\nlet mailingButton = document.querySelector(\".mailingButton\"); //кнопка в скрытом модальном окне подписаться на рассылку\nlet mailingModal = document.querySelector(\".mailingModal\"); // блок модальнога окна рассылки\nlet descriptionMailingButton = document.querySelector(\".description__mailing-button\"); // кнопка подписаться на рассылку \nlet backMailingModal = document.querySelector(\".backMailingModal\"); // прослойка в модальном окне рассылки сделаннная для того, чтоб можно закрывать это окно путем нажатия на любую, кроме самого окна, область.\nlet formRegistraition = document.querySelector(\".formRegistraition\")\nlet btnChoose = document.querySelector('.choose button');\nlet [...chooseInp] = document.querySelectorAll('.choose input[type=\"checkbox\"]'); // Все Input в поле \"Выбор по категориям\"\nlet sortChooseButtonMin = document.querySelector('.sortMin');\nlet sortChooseButtonMax = document.querySelector('.sortMax');\nlet slide = document.querySelectorAll(\".slide\"); // класс для картинки из карусели сезон 2020/21\nlet showing = document.querySelectorAll(\".showing\"); //класс для картинки из карусели сезон 2020/21\nlet clockImage = document.querySelectorAll(\".clock img\"); //картинки\nlet modalClockDescription = document.querySelector(\".modalClockDescription\"); // модальное окно для описание часов\nlet modalClockDescriptionDescription = document.querySelector(\".modalClockDescription__description\"); //блок для динамической подгрузки описания часов в модальном окне\nlet modalClockDescriptionCharacteristic = document.querySelector(\".modalClockDescription__characteristic\"); //блок для динамической подгрузки характеристики часов в модальном окне\nlet modalClockDescriptionImg = document.querySelector('.modalClockDescription__img'); // мини изображение для модального окна с описанием часов\nlet modalClockDescriptionPrice = document.querySelector(\".modalClockDescription__price\"); // блок для динамической подгрузки цены\nlet passw = document.querySelector(\".passw\");\nlet priceClock = document.getElementById('priceClock'); // переменная для фильтрации по цене\nlet valueRangeOut = document.querySelector('.valueRangeOut'); // блок вывода вводимой цены\nlet brendsBtn = document.querySelector(\".brendsBtn\"); // Кнопка выбора бренда\nlet brends = document.querySelector(\".brends\"); // список с брендами\nlet resetChoose = document.querySelector(\".resetChoose\"); // кнопка сброса фильтров\nlet miniMenu = document.querySelector(\".mini-menu\"); //кнопка для скрытия меню верхнего\nlet menu = document.querySelector(\".menu\"); // список верхнего меню\nlet backMenu = document.querySelector(\".back\"); // кнопка вехода из меню (при медиа запросе)\nlet menuLink = document.querySelector(\".menu li a\"); // ссылки меню в модальном окне (при меди запросе)\nlet filterChooseClock = document.querySelector(\".filterChooseClock\"); // боковая паенль выбора (сортировка, фильтрация) часов на странице Catalog\nlet backFilter = document.querySelector(\".backFilter\"); // боковая паенль выбора (сортировка, фильтрация) часов на странице Catalog\nlet menuFilterChooseClock = document.querySelector(\".menuFilterChooseClock\"); // боковая паенль выбора (сортировка, фильтрация) часов на странице Catalog\n\n\n\n// ---------------------верхнее меню----------------------------\n\nminiMenu.addEventListener(\"click\", () => {\n    miniMenu.classList.toggle('active');\n    menu.classList.toggle('show');\n})\n\nbackMenu.addEventListener(\"click\", () => {\n    miniMenu.classList.remove('active');\n    menu.classList.remove('show');\n})\n\n\n\n\n// ----------------------------------Поиск товара-------------------\nsearch.addEventListener('click', () => {\n    searchHidden.classList.toggle('searchInput'); //Выводим поле ввода для поиска (переключаем класс для отображения скрытой строки)\n    let searchInput = document.querySelector('.searchInput'); // получаем в js поле ввода с классом 'searchInput'\n    searchInput.setAttribute('list', 'searchHiddens'); //для визульного отображения поиска (если есть совпадения) добавляем аттрибуты\n    let newDoc = document.createElement('datalist');\n    newDoc.setAttribute('id', 'searchHiddens'); // Присваиваем \n    searchInput.insertAdjacentElement('afterend', newDoc); // Добавляем сразу за input наш новый созданный эллемент\n\n    const fetchData = async () => {\n        const url2 = `http://127.0.0.1:3007/catalog`;\n        const response = await fetch(url2);\n        const searchClock = await response.json();\n\n        searchClock.forEach((elem) => {\n            newDoc.innerHTML += `<option value=\"${elem.model}\">` // Добавляем все наши модели в html (в dataList)\n        })\n    }\n    fetchData()\n    // if (searchHidden.classList.contains('searchInput') == false) {\n    //     searchInput.removeAttribute('list', 'searchHiddens')\n    // }\n\n    searchInput.addEventListener(\"keyup\", (e) => { //после того, как нажали кнопку \n        let modelValue = searchInput.value; // Получаем значение вводимое пользователем в поисковую строку\n\n        if (e.keyCode === 13) { // Если нажата кнопка Enter \n            // создаем окно с описанием часов\n\n            const fetchClock = async () => {\n                const url3 = `http://127.0.0.1:3007/catalog`\n                const response3 = await fetch(url3);\n                const result3 = await response3.json()\n                result3.forEach((elem) => { // перебираем все наявные в файле json объекты с часами\n                    if (elem.model == modelValue) { // и сравниваем значение всех ключей model полученых из базы с введенным пользователем названием часов, которые он ищет (если при переборе массива значений с ключом model находим совпадение значения кдюча model с введенным пользователем назанием, тогда строим модальное окно с описанием)\n                        modalClockDescriptionDescription.innerHTML = `${elem.description}`;\n                        modalClockDescriptionCharacteristic.innerHTML = `${elem.charakteristik}`;\n                        modalClockDescriptionPrice.innerHTML = `${elem.price} грн.`;\n                        modalClockDescriptionImg.innerHTML = `<img src = \"${elem.image}\" alt = \"\" data-clock = \"${elem.model}\" >`\n                        modalClockDescription.style.display = 'block';\n                    }\n                })\n            }\n            fetchClock()\n        }\n    })\n})\n\n\n\n\n// ------------------------Регистрация------------------------------\nheaderContactsAutorization.onclick = () => {\n    autorization.style.display = 'block';\n}\n\n// -------------------Кнопка закрытия модальных окон----------------------\nexitAutorization.forEach((e) => {\n    e.addEventListener('click', () => {\n        autorization.style.display = 'none';\n        modalClockDescription.style.display = 'none';\n    })\n});\n\n//---------------Подписка на рассылку-----------------------------\ndescriptionMailingButton.onclick = () => {\n    mailingModal.style.display = 'block';\n}\n// -------------Удаление модального окна подписки на рассылку ------------------------\nbackMailingModal.addEventListener('click', () => {\n    mailingModal.style.display = 'none';\n})\n\n// // --------------валидация почты-------------------\n// function validateEmail(passw) {\n//     var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n//     return re.test(String(email).toLowerCase());\n// }\n\n\n//    ------------------- карусель-------------------------\n\nsetInterval(() => {\n    setTimeout(() => {\n        slide.forEach((el) => {\n            el.style.display = 'none';\n\n        });\n        showing.forEach((e) => {\n            e.style.display = 'block';\n        })\n    }, 1);\n\n    setTimeout(() => {\n        showing.forEach((e) => {\n            e.style.display = 'none';\n        });\n        slide.forEach((el) => {\n            el.style.display = 'block';\n        })\n\n    }, 3000);\n}, 6000);\n\n// -----------------------------------------------------\n\n\nwindow.onload = () => { // При загрузке страницы  запускается функция\n\n\n    //---------------Запрос на серевер и вызгрузка  товара в секцию \"Новые поступления\"-------------------------\n\n    const fetchData2 = async () => { //async  - функция всегда возвращает Promise (специальный объект, который содержит своё состояние. Вначале pending («ожидание»), затем – одно из: fulfilled («выполнено успешно») или rejected («выполнено с ошибкой»)). \n        const url2 = `http://127.0.0.1:3007/catalog` // создаем переменную, в которую передаем url для отправки запроса (см. ниже метод fetch())\n        const response2 = await fetch(url2) // Создаем переменую в которую передаем наши сетевые запросы на сервер (Mackoon) (для скачивания содержимого по адресу url). Метод fetch()делает сетевые запросы и получает информацию с сервера Оператор await используется для ожидания окончания Promise \n        const clock2 = await response2.json() // Создаем переменную в которую передаем полученный ответ в формате json  (декодирует ответ в формате JSON)\n        // ------------------Выводим весь массив часов\n\n        let downloadAllClock = function () {\n            clock2.forEach(function (elem) {\n                newItemsClock.innerHTML += ` \n                <div class=\"season__clock-description\" data-price=\"${elem.price}\">\n                <div class=\"clock\">\n                <img src=\"${elem.image}\" alt=\"clock\" data-clock = \"${elem.model}\" >\n                </div>\n                <p>${elem.model}</p>\n                <p>${elem.price} грн.</p>\n                </div>`\n            })\n        }\n\n        downloadAllClock();\n\n\n        // --------------------------модальное окно вывода карточки товара с описанием -------------------------\n\n        clockImage.forEach((e) => {\n            e.onclick = () => {\n                clock2.forEach((elem) => {\n                    let x = e.getAttribute('data-clock') // получаем значенние атрибута \n                    if (x == elem.model) {\n                        console.log(elem.model)\n                        modalClockDescriptionDescription.innerHTML = `${elem.description}`;\n                        modalClockDescriptionCharacteristic.innerHTML = `${elem.charakteristik}`;\n                        modalClockDescriptionPrice.innerHTML = `${elem.price} грн.`;\n                        modalClockDescriptionImg.innerHTML = `<img src=\"${elem.image}\" alt=\"\" data-clock = \"${elem.model}\">`\n                        modalClockDescription.style.display = 'block';\n                    }\n                })\n            }\n        })\n\n\n\n\n        // ---------------------------------------------------\n\n        // Выводим значение (value) цены на экран\n        priceClock.addEventListener('input', function () {\n            valueRangeOut.innerHTML = priceClock.value;\n        })\n        // --------------------------\n\n        // ---------Выпадающий список с брендами часов в поле \"Выбор по категориям\"\n        brendsBtn.addEventListener(\"click\", () => {\n            brends.classList.toggle(\"brendsHidden\")\n        })\n\n        // // ------------------Проводим фильтрацию в зависимости от выбранной категории\n        // let allFilter = new Set();\n        // btnChoose.addEventListener('click', () => {\n        //     console.log('меня нажали')\n\n        //     console.log(allFilter)\n        //     newItemsClock.innerHTML = \"\"; // очищаем страницу вывода, чтоб не накапливались карточки с часами\n        //     sortChooseButtonMax.style.backgroundColor = 'transparent'; // убираем стили с кнопок сортировка товара, если они включены\n        //     sortChooseButtonMax.style.color = '#fff';\n        //     sortChooseButtonMin.style.backgroundColor = 'transparent';\n        //     sortChooseButtonMin.style.color = '#fff';\n\n        //     chooseInp.forEach(function (elem) {\n        //         if (elem.checked) {\n\n        //             // ------------------фильтр по полу-------------------\n\n        //             let manClock = elem.id; // получаем id выбранного checkboxa, чтоб его подставить для фильтрамвыводимых товаров\n        //             let clockChoose = clock2.filter(function (e) {\n        //                 return e.id === manClock // сравниваем и возвращаем только совпадения выбраного (отмеченного) checkboxa и id массива clock\n        //             })\n\n        //             // ------------фильтр по бренду-----------------------\n\n        //             let brendClockChoose = elem.id; // получаем id выбранного checkboxa c часами, чтоб его подставить для фильтра выводимых товаров\n        //             let clockChoose2 = clock2.filter(function (e) {\n        //                 return e.brend === brendClockChoose // сравниваем и возвращаем только совпадения выбраного (отмеченного) checkboxa и id массива clock\n        //             })\n\n        //             // -----------------------------фильтрация по цене------------------------\n        //             let priceInp = +priceClock.value; // получаем значение цены\n        //             let clockChoosePrice = [] //создаем пустой массив, куда будут попадать все часы, цены которых не превышает заданной пользователем\n        //             clockChoosePrice = clock2.filter(function (e) { // clock2 это переменная в которую передаем полученный ответ в формате json  \n        //                 return e.price < priceInp // сравниваем и возвращаем только часы с ценой ниже границы введенной пользователем\n        //             })\n\n\n        //             clockChoose.forEach((e) => {\n        //                 allFilter.add(e)\n        //             })\n\n        //             clockChoosePrice.forEach((e) => {\n        //                 allFilter.add(e)\n        //             })\n        //             clockChoose2.forEach((e) => {\n        //                 allFilter.add(e)\n        //             })\n\n        //             console.log(allFilter)\n\n\n        //             allFilter.forEach((e) => {\n        //                 newItemsClock.innerHTML += ` \n        //                 <div class=\"season__clock-description\" data-price = \"${e.price}\">\n        //                 <div class=\"clock\">\n        //                 <img src=\"${e.image}\" alt=\"clock\" data-clock = \"${e.model}\">\n        //                 </div>\n        //                 <p>${e.model}</p>\n        //                 <p>${e.price} грн.</p>\n        //                 </div>  \n        //                 `\n        //             })\n        //         }\n        //     })\n        //     allFilter.clear();\n\n        // })\n\n\n\n        // for (i = 0; i < clockChoose.length; i++) {\n        //     newItemsClock.innerHTML = \"\" // очищаем поле вывода чтоб из-за цикла не повторялись выводимые часы\n        //     console.log(clockChoose[i].id)\n        //     for (k = 0; k < clockChoosePrice.length; k++) {\n        //         console.log(clockChoosePrice[k].id)\n        //         if (clockChoose[i].id === clockChoosePrice[k].id) {\n        //             // console.log(clockChoose[i].id)\n        //             newItemsClock.innerHTML += ` \n        //             <div class=\"season__clock-description\" data-price = \"${clockChoosePrice[k].price}\">\n        //             <div class=\"clock\">\n        //             <img src=\"${clockChoosePrice[k].image}\" alt=\"clock\" data-clock = \"${clockChoosePrice[k].model}\">\n        //             </div>\n        //             <p>${clockChoosePrice[k].model}</p>\n        //             <p>${clockChoosePrice[k].price} грн.</p>\n        //             </div>  \n        //             `\n        //         }\n        //     }\n        // }\n\n\n        // ------------------Проводим фильтрацию в зависимости от выбранной категории\n        btnChoose.onclick = () => {\n            newItemsClock.innerHTML = \"\"; // очищаем страницу вывода, чтоб не накапливались карточки с часами\n            sortChooseButtonMax.style.backgroundColor = 'transparent'; // убираем стили с кнопок сортировка товара, если они включены\n            sortChooseButtonMax.style.color = '#fff';\n            sortChooseButtonMin.style.backgroundColor = 'transparent';\n            sortChooseButtonMin.style.color = '#fff';\n\n            menuFilterChooseClock.classList.remove('active'); //Закрытие меню выбора (фильтра и сортировка) товара (модального окна под мобильные устройства)\n            filterChooseClock.classList.remove('show'); //Закрытие меню выбора (фильтра и сортировка) товара (модального окна под мобильные устройства)\n\n            chooseInp.forEach(function (elem) {\n                if (elem.checked) {\n                    let manClock = elem.id; // получаем id выбранного checkboxa, чтоб его подставить для фильтрамвыводимых товаров\n\n                    let clockChoose = clock2.filter(function (e) {\n                        return e.id === manClock // сравниваем и возвращаем только совпадения выбраного (отмеченного) checkboxa и id массива clock\n                    })\n\n                    //перебираем массив с выбранной категорией часов и выводим их в html\n                    clockChoose.forEach((e) => {\n                        newItemsClock.innerHTML += ` \n                    <div class=\"season__clock-description\" data-price = \"${e.price}\">\n                    <div class=\"clock\">\n                    <img src=\"${e.image}\" alt=\"clock\" data-clock = \"${e.model}\">\n                    </div>\n                    <p>${e.model}</p>\n                    <p>${e.price} грн.</p>\n                    </div>  \n                    `\n                    })\n\n                }\n            })\n\n            // -------------------------------Фильтрация по брендам-------------------------\n\n            chooseInp.forEach(function (elem) {\n                if (elem.checked) {\n                    let brendClockChoose = elem.id; // получаем id выбранного checkboxa c часами, чтоб его подставить для фильтра выводимых товаров\n\n                    let clockChoose = clock2.filter(function (e) {\n                        return e.brend === brendClockChoose // сравниваем и возвращаем только совпадения выбраного (отмеченного) checkboxa и id массива clock\n                    })\n\n                    //перебираем массив с выбранной категорией часов и выводим их в html\n                    clockChoose.forEach((e) => {\n                        newItemsClock.innerHTML += ` \n                    <div class=\"season__clock-description\" data-price = \"${e.price}\">\n                    <div class=\"clock\">\n                    <img src=\"${e.image}\" alt=\"clock\" data-clock = \"${e.model}\">\n                    </div>\n                    <p>${e.model}</p>\n                    <p>${e.price} грн.</p>\n                    </div>  \n                    `\n                    })\n\n                }\n            })\n\n\n\n            // -----------------------------фильтрация по цене------------------------\n            let priceInp = +priceClock.value; // получаем значение цены\n            let clockChoosePrice = [] //создаем пустой массив, куда будут попадать все часы, цены которых не превышает заданной пользователем\n            clockChoosePrice = clock2.filter(function (e) { // clock2 это переменная в которую передаем полученный ответ в формате json  \n                return e.price < priceInp // сравниваем и возвращаем только часы с ценой ниже границы введенной пользователем\n            })\n\n            //перебираем массив clockChoose и выводим в html блоки, которые соответсвуют нашим условиям (часы с ценой ниже границы введенной пользователем)\n            clockChoosePrice.forEach((e) => {\n                newItemsClock.innerHTML += ` \n                <div class=\"season__clock-description\" data-price = \"${e.price}\">\n                <div class=\"clock\">\n                <img src=\"${e.image}\" alt=\"clock\" data-clock = \"${e.model}\">\n                </div>\n                <p>${e.model}</p>\n                <p>${e.price} грн.</p>\n                </div>  \n                `\n            })\n\n\n\n            // for (i = 0; i < clockChoose.length; i++) {\n            //     newItemsClock.innerHTML = \"\" // очищаем поле вывода чтоб из-за цикла не повторялись выводимые часы\n            //     console.log(clockChoose[i].id)\n            //     for (k = 0; k < clockChoosePrice.length; k++) {\n            //         console.log(clockChoosePrice[k].id)\n            //         if (clockChoose[i].id === clockChoosePrice[k].id) {\n            //             // console.log(clockChoose[i].id)\n            //             newItemsClock.innerHTML += ` \n            //             <div class=\"season__clock-description\" data-price = \"${clockChoosePrice[k].price}\">\n            //             <div class=\"clock\">\n            //             <img src=\"${clockChoosePrice[k].image}\" alt=\"clock\" data-clock = \"${clockChoosePrice[k].model}\">\n            //             </div>\n            //             <p>${clockChoosePrice[k].model}</p>\n            //             <p>${clockChoosePrice[k].price} грн.</p>\n            //             </div>  \n            //             `\n            //         }\n            //     }\n            // }\n        }\n\n\n        // -------------------Сортировка по цене---------------------\n\n        //При нажатии кнопки сортировки по возрастанию вызываем функцию, где вызываем функцию sortList, \n        // куда передаем дата атрибут с нашей ценой('data-price')\n        sortChooseButtonMin.onclick = function () {\n            sortList('data-price');\n            sortChooseButtonMin.style.backgroundColor = '#ffff';\n            sortChooseButtonMin.style.color = '#000';\n            sortChooseButtonMax.style.backgroundColor = 'transparent';\n            sortChooseButtonMax.style.color = '#fff';\n        }\n\n        function sortList(sortType) { //sortType это 'data-price'\n            for (let i = 0; i < newItemsClock.children.length - 1; i++) { // перебираем все наши карточки, где i - это наша первая карточка\n                for (let j = i; j < newItemsClock.children.length; j++) { // j - это карточка, которая идет следом за первой карточкой. Это делается для того, чтоб сделать сравнение цены между этими карточками, которая записана в атрибут 'data-price'\n                    if (+newItemsClock.children[i].getAttribute(sortType) > +newItemsClock.children[j].getAttribute(sortType)) { // сравниваем наши цены. знак \"+\" ставим потому, что изначально мы получаем цену в виде строки и нам ее надо перевести в число.\n                        let replacedNode = newItemsClock.replaceChild(newItemsClock.children[j], newItemsClock.children[i]); //метод .replaceChild() объекта newItemsClock позволяет заменить один дочерний узел указанного узла другим, т.е. newItemsClock.children[j] заменить вместо (вставить на его место) newItemsClock.children[i], а в  переменную replacedNode мы записываем карточку, которую мы удалили (на чье место подставили newItemsClock.children[j]).\n                        insertAfter(replacedNode, newItemsClock.children[i]); //создаем функцию, которая будет добавлять элемент в  список дочерних элементов родителя.\n                    }\n                }\n            }\n        }\n\n        // -------------------сортировка по убыванию----------------------\n        sortChooseButtonMax.onclick = function () {\n            sortListDesc('data-price');\n            // sortChooseButtonMin.style.backgroundColor = '#ffff';\n            sortChooseButtonMax.style.backgroundColor = '#ffff';\n            sortChooseButtonMax.style.color = '#000';\n            sortChooseButtonMin.style.backgroundColor = 'transparent';\n            sortChooseButtonMin.style.color = '#fff';\n        }\n\n        function sortListDesc(sortType) {\n            for (let i = 0; i < newItemsClock.children.length - 1; i++) {\n                for (let j = i; j < newItemsClock.children.length; j++) {\n                    if (+newItemsClock.children[i].getAttribute(sortType) < +newItemsClock.children[j].getAttribute(sortType)) {\n                        let replacedNode = newItemsClock.replaceChild(newItemsClock.children[j], newItemsClock.children[i]);\n                        insertAfter(replacedNode, newItemsClock.children[i]);\n                    }\n                }\n            }\n        }\n        // функция, которая  добавляет элемент в  список дочерних элементов родителя после указанного элемента.\n        // Метод insertBefore() добавляет узел (elem) в список дочерних элементов указанного родителя перед указанным узлом (refElem). \n        // parentNode родитель текущего элемента\n        function insertAfter(elem, refElem) {\n            return refElem.parentNode.insertBefore(elem, refElem.nextSibling);\n        }\n\n        // ------------------------кнопка сброса -----------------------\n        resetChoose.onclick = () => {\n            chooseInp.forEach((e) => {\n                if (e.checked) {\n\n                    e.checked = false\n                }\n            })\n            newItemsClock.innerHTML = \"\"\n            downloadAllClock(); // Выводим все карточки с часами\n        }\n        // -----------------------------------------------------------------\n\n\n        // ------------------боковая паенль выбора (сортировка, фильтрация) часов на странице Catalog\n        menuFilterChooseClock.addEventListener(\"click\", () => {\n            menuFilterChooseClock.classList.toggle('active');\n            filterChooseClock.classList.toggle('show');\n        })\n\n        backFilter.addEventListener(\"click\", () => {\n            menuFilterChooseClock.classList.remove('active');\n            filterChooseClock.classList.remove('show');\n        })\n\n    }\n    fetchData2()\n\n\n\n    // --------------------Кнопка редактирования личных данных------------------\n    let personalDataButton = document.querySelector(\".personalData__button\"); // кнопка редактирования личной информации\n    let formPersonal = document.querySelectorAll(\".formPersonal input\") // Получаем все поля контактной информации для для их редактирования\n    let personalSaveDataButton = document.querySelector(\".personalSaveData__button\") // кнопка сохранения личной информации\n\n\n    personalDataButton.addEventListener(\"click\", () => {\n        formPersonal.forEach((e) => {\n            e.removeAttribute(\"disabled\");\n            e.style.color = \"red\"\n            e.style.border = \"1px solid grey\"\n        })\n        personalSaveDataButton.style.display = \"block\"\n    })\n\n    personalSaveDataButton.addEventListener(\"click\", () => {\n        formPersonal.forEach((e) => {\n            e.setAttribute(\"disabled\", \"disabled\");\n            e.style.color = \"black\"\n            e.style.border = \"none\"\n        })\n        personalSaveDataButton.style.display = \"none\"\n    })\n\n}\n\n\n\n// ----------------------Дополнительный запрос на сервис для загрузки часов----------\nbuttonNewClock.onclick = () => {\n    buttonNewClock.classList.add('onButton'); // добавляем класс для того, чтоб потом запретить повторное нажатие кнопки\n    const fetchData = async () => { //async  - функция всегда возвращает Promise (специальный объект, который содержит своё состояние. Вначале pending («ожидание»), затем – одно из: fulfilled («выполнено успешно») или rejected («выполнено с ошибкой»)). \n        const url = `http://127.0.0.1:3007/catalog` // создаем переменную, в которую передаем url для отправки запроса (см. ниже метод fetch())\n        const response = await fetch(url) // Создаем переменую в которую передаем наши сетевые запросы на сервер (Mackoon) (для скачивания содержимого по адресу url). Метод fetch()делает сетевые запросы и получает информацию с сервера Оператор await используется для ожидания окончания Promise \n        const result = await response.json() // Создаем переменную в которую передаем полученный ответ в формате json  (декодирует ответ в формате JSON)\n        // newItemsClock.remove(); // удаляем блок, чтоб на его место записать новый\n\n        let newelem = document.createElement('div') //Создаем елемент 'div' (Это наш будущая типичная карточка)\n        newelem.classList.add('newItems__clock') // Присваиваем класс новому блоку\n        clockSlider.insertAdjacentElement('beforebegin', newelem) // метод, который добавляет новые блоки \n        result.map((el) => { // Перебираем файл json в котором написаны нашы блоки (слайды). Написано все это в Mackoon \n            let elem = document.createElement('div') //Создаем елемент 'div' (Это наш будущая типичная карточка)\n            elem.classList.add('season__clock-description') // Присваиваем класс новому блоку\n            elem.innerHTML = ` \n                <div class=\"clock\">\n                <img src=\"${el.image}\" alt=\"clock\" data-clock = \"${el.model}\">\n                </div>\n                <p>${el.model}</p>\n                <p>${el.price}</p>`\n            newItemsClock.insertAdjacentElement('beforeend', elem) // метод, который добавляет новые блоки \n            // newelem.append(elem); // добавляем карточки внутрь  newelem\n        })\n        newItemsClock = document.querySelector('.newItems__clock'); // создаем заново переменную, чтоб в дальнейшем ее убрать (это делается для того, чтоб в DOM не суммировались (не накапливалались) блоки с классом newItems__clock, а перезатирались )\n    }\n    fetchData()\n    if (buttonNewClock.classList.contains('onButton')) {\n        buttonNewClock.disabled = true; //блокируем повторное нажатие кнопки,чтоб не выводить повторно уже выведенное\n    }\n}","//------------------------Модальное окно с описанием при клике на карточку часов в разеле \"Сезон 2020/21\"\n// window.onload = () => { // При загрузке страницы  запускается функция\n//     clockImage.forEach((e) => {\n\n//         e.onclick = () => {\n\n//             const fetchClock = async () => {\n//                 const url3 = `http://127.0.0.1:3007/catalog`\n//                 const response3 = await fetch(url3);\n//                 const result3 = await response3.json()\n//                 result3.forEach((elem) => {\n\n//                     let x = e.getAttribute('data-clock') // получаем значенние атрибута \n//                     if (x == elem.model) {\n//                         console.log(elem.model)\n//                         modalClockDescriptionDescription.innerHTML = `${elem.description}`;\n//                         modalClockDescriptionCharacteristic.innerHTML = `${elem.charakteristik}`;\n//                         modalClockDescriptionPrice.innerHTML = `${elem.price} грн.`;\n//                         modalClockDescriptionImg.innerHTML = `<img src=\"${elem.image}\" alt=\"\" data-clock = \"${elem.model}\">`\n//                         modalClockDescription.style.display = 'block';\n//                     }\n//                 })\n//             }\n//             fetchClock()\n//         }\n\n//     })\n// }\n\n\n// let filterChooseClock = document.querySelector(\".filterChooseClock\"); // боковая паенль выбора (сортировка, фильтрация) часов на странице Catalog\n// let backFilter = document.querySelector(\".backFilter\"); // боковая паенль выбора (сортировка, фильтрация) часов на странице Catalog\n// let menuFilterChooseClock = document.querySelector(\".menuFilterChooseClock\"); // боковая паенль выбора (сортировка, фильтрация) часов на странице Catalog\n// // ------------------боковая паенль выбора (сортировка, фильтрация) часов на странице Catalog\n\n// menuFilterChooseClock.addEventListener(\"click\", () => {\n//     menuFilterChooseClock.classList.toggle('active');\n//     filterChooseClock.classList.toggle('show');\n// })\n\n// backFilter.addEventListener(\"click\", () => {\n//     menuFilterChooseClock.classList.remove('active');\n//     filterChooseClock.classList.remove('show');\n// })","// // --------------------Кнопка редактирования личных данных------------------\r\n// let personalDataButton = document.querySelector(\".personalData__button\"); // кнопка редактирования личной информации\r\n// let formPersonal = document.querySelectorAll(\".formPersonal input\") // Получаем все поля контактной информации для для их редактирования\r\n// let personalSaveDataButton = document.querySelector(\".personalSaveData__button\") // кнопка сохранения личной информации\r\n\r\n// console.log(\"ddddddddddddddddddd\")\r\n// let newButtonSave = document.createElement(\"button\");\r\n// personalDataButton.onclick = () => {\r\n//     formPersonal.forEach((e) => {\r\n//         e.removeAttribute(\"disabled\");\r\n//         e.style.color = \"red\"\r\n//         e.style.border = \"1px solid grey\"\r\n//     })\r\n//     personalSaveDataButton.style.display = \"block\"\r\n// }\r\n\r\n// personalSaveDataButton.addEventListener(\"click\", () => {\r\n//     formPersonal.forEach((e) => {\r\n//         e.setAttribute(\"disabled\", \"disabled\");\r\n//         e.style.color = \"black\"\r\n//         e.style.border = \"none\"\r\n//     })\r\n// })","// // ----------------------------------Поиск товара-------------------\n// let search = document.querySelector(\".lastLi\");\n// let searchHidden = document.querySelector('.searchHidden');\n\n// search.addEventListener('click', () => {\n//     searchHidden.classList.toggle('searchInput'); //Выводим поле ввода для поиска (переключаем класс для отображения скрытой строки)\n//     let searchInput = document.querySelector('.searchInput'); // получаем в js поле ввода с классом 'searchInput'\n//     searchInput.setAttribute('list', 'searchHiddens'); //для визульного отображения поиска (если есть совпадения) добавляем аттрибуты\n//     let newDoc = document.createElement('datalist');\n//     newDoc.setAttribute('id', 'searchHiddens'); // Присваиваем \n//     searchInput.insertAdjacentElement('afterend', newDoc); // Добавляем сразу за input наш новый созданный эллемент\n\n//     const fetchData = async () => {\n//         const url2 = `http://127.0.0.1:3007/catalog`;\n//         const response = await fetch(url2);\n//         const searchClock = await response.json();\n\n//         searchClock.forEach((elem) => {\n//             newDoc.innerHTML += `<option value=\"${elem.model}\">` // Добавляем все наши модели в html (в dataList)\n//         })\n//     }\n//     fetchData()\n//     // if (searchHidden.classList.contains('searchInput') == false) {\n//     //     searchInput.removeAttribute('list', 'searchHiddens')\n//     // }\n\n//     searchInput.addEventListener(\"keyup\", (e) => { //после того, как нажали кнопку \n//         let modelValue = searchInput.value; // Получаем значение вводимое пользователем в поисковую строку\n\n//         if (e.keyCode === 13) { // Если нажата кнопка Enter \n//             // создаем окно с описанием часов\n\n//             const fetchClock = async () => {\n//                 const url3 = `http://127.0.0.1:3007/catalog`\n//                 const response3 = await fetch(url3);\n//                 const result3 = await response3.json()\n//                 result3.forEach((elem) => { // перебираем все наявные в файле json объекты с часами\n//                     if (elem.model == modelValue) { // и сравниваем значение всех ключей model полученых из базы с введенным пользователем названием часов, которые он ищет (если при переборе массива значений с ключом model находим совпадение значения кдюча model с введенным пользователем назанием, тогда строим модальное окно с описанием)\n//                         modalClockDescriptionDescription.innerHTML = `${elem.description}`;\n//                         modalClockDescriptionCharacteristic.innerHTML = `${elem.charakteristik}`;\n//                         modalClockDescriptionImg.innerHTML = `<img src=\"${elem.image}\" alt=\"\" data-clock = \"${elem.model}\">`\n//                         modalClockDescription.style.display = 'block';\n//                     }\n//                 })\n//             }\n//             fetchClock()\n//         }\n//     })\n// })"]}